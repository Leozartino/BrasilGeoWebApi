// <auto-generated />
using BrasilGeo.Infra.Context;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace BrasilGeo.Infra.Migrations
{
    [DbContext(typeof(BrazilGeoContext))]
    [Migration("20231020094338_v1")]
    partial class v1
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.12")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("BrasilGeo.Domain.Entities.IBGE.LocationIBGE", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("BIGINT")
                        .HasColumnName("Id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<string>("City")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("NVARCHAR")
                        .HasColumnName("City");

                    b.HasKey("Id");

                    b.ToTable("LocationIBGE", (string)null);
                });

            modelBuilder.Entity("BrasilGeo.Domain.Entities.Role", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("BIGINT")
                        .HasColumnName("Id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<string>("RoleName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("NVARCHAR")
                        .HasColumnName("RoleName");

                    b.HasKey("Id");

                    b.ToTable("Role", (string)null);
                });

            modelBuilder.Entity("BrasilGeo.Domain.Entities.User", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("BIGINT")
                        .HasColumnName("Id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.HasKey("Id");

                    b.ToTable("User", (string)null);
                });

            modelBuilder.Entity("UserRole", b =>
                {
                    b.Property<long>("RoleId")
                        .HasColumnType("BIGINT");

                    b.Property<long>("UserId")
                        .HasColumnType("BIGINT");

                    b.HasKey("RoleId", "UserId");

                    b.HasIndex("UserId");

                    b.ToTable("UserRole");
                });

            modelBuilder.Entity("BrasilGeo.Domain.Entities.IBGE.LocationIBGE", b =>
                {
                    b.OwnsOne("BrasilGeo.Domain.ValueObjects.LocationIBGE.State", "State", b1 =>
                        {
                            b1.Property<long>("LocationIBGEId")
                                .HasColumnType("BIGINT");

                            b1.Property<string>("Uf")
                                .IsRequired()
                                .HasMaxLength(5)
                                .HasColumnType("NVARCHAR")
                                .HasColumnName("State");

                            b1.HasKey("LocationIBGEId");

                            b1.ToTable("LocationIBGE");

                            b1.WithOwner()
                                .HasForeignKey("LocationIBGEId");
                        });

                    b.Navigation("State")
                        .IsRequired();
                });

            modelBuilder.Entity("BrasilGeo.Domain.Entities.User", b =>
                {
                    b.OwnsOne("BrasilGeo.Domain.ValueObjects.Email", "Email", b1 =>
                        {
                            b1.Property<long>("UserId")
                                .HasColumnType("BIGINT");

                            b1.Property<string>("Adress")
                                .IsRequired()
                                .HasMaxLength(250)
                                .HasColumnType("NVARCHAR")
                                .HasColumnName("Email");

                            b1.HasKey("UserId");

                            b1.ToTable("User");

                            b1.WithOwner()
                                .HasForeignKey("UserId");
                        });

                    b.OwnsOne("BrasilGeo.Domain.ValueObjects.Password", "PasswordHash", b1 =>
                        {
                            b1.Property<long>("UserId")
                                .HasColumnType("BIGINT");

                            b1.Property<string>("Pass")
                                .IsRequired()
                                .HasMaxLength(500)
                                .HasColumnType("NVARCHAR")
                                .HasColumnName("PasswordHash");

                            b1.HasKey("UserId");

                            b1.ToTable("User");

                            b1.WithOwner()
                                .HasForeignKey("UserId");
                        });

                    b.Navigation("Email")
                        .IsRequired();

                    b.Navigation("PasswordHash")
                        .IsRequired();
                });

            modelBuilder.Entity("UserRole", b =>
                {
                    b.HasOne("BrasilGeo.Domain.Entities.Role", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BrasilGeo.Domain.Entities.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
